// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, stripe_payment_intent_id, status, total_amount, shipping_address)
VALUES (?, ?, ?, ?, ?)
RETURNING id, user_id, stripe_payment_intent_id, status, total_amount, shipping_address, shipstation_order_id, tracking_number, created_at, updated_at
`

type CreateOrderParams struct {
	UserID                int64          `json:"user_id"`
	StripePaymentIntentID sql.NullString `json:"stripe_payment_intent_id"`
	Status                string         `json:"status"`
	TotalAmount           int64          `json:"total_amount"`
	ShippingAddress       string         `json:"shipping_address"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.StripePaymentIntentID,
		arg.Status,
		arg.TotalAmount,
		arg.ShippingAddress,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingAddress,
		&i.ShipstationOrderID,
		&i.TrackingNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, design_system_id, product_type, quantity, unit_price)
VALUES (?, ?, ?, ?, ?)
RETURNING id, order_id, design_system_id, product_type, quantity, unit_price, created_at
`

type CreateOrderItemParams struct {
	OrderID        int64  `json:"order_id"`
	DesignSystemID int64  `json:"design_system_id"`
	ProductType    string `json:"product_type"`
	Quantity       int64  `json:"quantity"`
	UnitPrice      int64  `json:"unit_price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.DesignSystemID,
		arg.ProductType,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DesignSystemID,
		&i.ProductType,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, stripe_payment_intent_id, status, total_amount, shipping_address, shipstation_order_id, tracking_number, created_at, updated_at FROM orders WHERE id = ? LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingAddress,
		&i.ShipstationOrderID,
		&i.TrackingNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByStripePaymentIntent = `-- name: GetOrderByStripePaymentIntent :one
SELECT id, user_id, stripe_payment_intent_id, status, total_amount, shipping_address, shipstation_order_id, tracking_number, created_at, updated_at FROM orders WHERE stripe_payment_intent_id = ? LIMIT 1
`

func (q *Queries) GetOrderByStripePaymentIntent(ctx context.Context, stripePaymentIntentID sql.NullString) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByStripePaymentIntent, stripePaymentIntentID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.TotalAmount,
		&i.ShippingAddress,
		&i.ShipstationOrderID,
		&i.TrackingNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, design_system_id, product_type, quantity, unit_price, created_at FROM order_items WHERE order_id = ?
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.DesignSystemID,
			&i.ProductType,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOrders = `-- name: ListUserOrders :many
SELECT id, user_id, stripe_payment_intent_id, status, total_amount, shipping_address, shipstation_order_id, tracking_number, created_at, updated_at FROM orders WHERE user_id = ? ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListUserOrdersParams struct {
	UserID int64 `json:"user_id"`
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListUserOrders(ctx context.Context, arg ListUserOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listUserOrders, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StripePaymentIntentID,
			&i.Status,
			&i.TotalAmount,
			&i.ShippingAddress,
			&i.ShipstationOrderID,
			&i.TrackingNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderShipping = `-- name: UpdateOrderShipping :exec
UPDATE orders
SET shipstation_order_id = ?, tracking_number = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateOrderShippingParams struct {
	ShipstationOrderID sql.NullString `json:"shipstation_order_id"`
	TrackingNumber     sql.NullString `json:"tracking_number"`
	ID                 int64          `json:"id"`
}

func (q *Queries) UpdateOrderShipping(ctx context.Context, arg UpdateOrderShippingParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderShipping, arg.ShipstationOrderID, arg.TrackingNumber, arg.ID)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
