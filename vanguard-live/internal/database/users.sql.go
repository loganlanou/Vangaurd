// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (clerk_id, email, name, stripe_customer_id)
VALUES (?, ?, ?, ?)
RETURNING id, clerk_id, email, name, stripe_customer_id, created_at, updated_at
`

type CreateUserParams struct {
	ClerkID          string         `json:"clerk_id"`
	Email            string         `json:"email"`
	Name             sql.NullString `json:"name"`
	StripeCustomerID sql.NullString `json:"stripe_customer_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ClerkID,
		arg.Email,
		arg.Name,
		arg.StripeCustomerID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByClerkID = `-- name: GetUserByClerkID :one
SELECT id, clerk_id, email, name, stripe_customer_id, created_at, updated_at FROM users WHERE clerk_id = ? LIMIT 1
`

func (q *Queries) GetUserByClerkID(ctx context.Context, clerkID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByClerkID, clerkID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, clerk_id, email, name, stripe_customer_id, created_at, updated_at FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, clerk_id, email, name, stripe_customer_id, created_at, updated_at FROM users ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ClerkID,
			&i.Email,
			&i.Name,
			&i.StripeCustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email = ?, name = ?, stripe_customer_id = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Email            string         `json:"email"`
	Name             sql.NullString `json:"name"`
	StripeCustomerID sql.NullString `json:"stripe_customer_id"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.StripeCustomerID,
		arg.ID,
	)
	return err
}
