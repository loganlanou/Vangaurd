// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: design_systems.sql

package database

import (
	"context"
	"database/sql"
)

const createDesignSystem = `-- name: CreateDesignSystem :one
INSERT INTO design_systems (user_id, name, description, palette_data, config_data, is_public)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, name, description, palette_data, config_data, is_public, created_at, updated_at
`

type CreateDesignSystemParams struct {
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	PaletteData string         `json:"palette_data"`
	ConfigData  string         `json:"config_data"`
	IsPublic    sql.NullBool   `json:"is_public"`
}

func (q *Queries) CreateDesignSystem(ctx context.Context, arg CreateDesignSystemParams) (DesignSystem, error) {
	row := q.db.QueryRowContext(ctx, createDesignSystem,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.PaletteData,
		arg.ConfigData,
		arg.IsPublic,
	)
	var i DesignSystem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.PaletteData,
		&i.ConfigData,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDesignSystem = `-- name: DeleteDesignSystem :exec
DELETE FROM design_systems WHERE id = ? AND user_id = ?
`

type DeleteDesignSystemParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteDesignSystem(ctx context.Context, arg DeleteDesignSystemParams) error {
	_, err := q.db.ExecContext(ctx, deleteDesignSystem, arg.ID, arg.UserID)
	return err
}

const getDesignSystem = `-- name: GetDesignSystem :one
SELECT id, user_id, name, description, palette_data, config_data, is_public, created_at, updated_at FROM design_systems WHERE id = ? LIMIT 1
`

func (q *Queries) GetDesignSystem(ctx context.Context, id int64) (DesignSystem, error) {
	row := q.db.QueryRowContext(ctx, getDesignSystem, id)
	var i DesignSystem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.PaletteData,
		&i.ConfigData,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPublicDesignSystems = `-- name: ListPublicDesignSystems :many
SELECT id, user_id, name, description, palette_data, config_data, is_public, created_at, updated_at FROM design_systems WHERE is_public = TRUE ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListPublicDesignSystemsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListPublicDesignSystems(ctx context.Context, arg ListPublicDesignSystemsParams) ([]DesignSystem, error) {
	rows, err := q.db.QueryContext(ctx, listPublicDesignSystems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DesignSystem{}
	for rows.Next() {
		var i DesignSystem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.PaletteData,
			&i.ConfigData,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserDesignSystems = `-- name: ListUserDesignSystems :many
SELECT id, user_id, name, description, palette_data, config_data, is_public, created_at, updated_at FROM design_systems WHERE user_id = ? ORDER BY created_at DESC LIMIT ? OFFSET ?
`

type ListUserDesignSystemsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListUserDesignSystems(ctx context.Context, arg ListUserDesignSystemsParams) ([]DesignSystem, error) {
	rows, err := q.db.QueryContext(ctx, listUserDesignSystems, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DesignSystem{}
	for rows.Next() {
		var i DesignSystem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.PaletteData,
			&i.ConfigData,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDesignSystem = `-- name: UpdateDesignSystem :exec
UPDATE design_systems
SET name = ?, description = ?, palette_data = ?, config_data = ?, is_public = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ? AND user_id = ?
`

type UpdateDesignSystemParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	PaletteData string         `json:"palette_data"`
	ConfigData  string         `json:"config_data"`
	IsPublic    sql.NullBool   `json:"is_public"`
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
}

func (q *Queries) UpdateDesignSystem(ctx context.Context, arg UpdateDesignSystemParams) error {
	_, err := q.db.ExecContext(ctx, updateDesignSystem,
		arg.Name,
		arg.Description,
		arg.PaletteData,
		arg.ConfigData,
		arg.IsPublic,
		arg.ID,
		arg.UserID,
	)
	return err
}
